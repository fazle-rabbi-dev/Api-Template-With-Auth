openapi: 3.0.0
info:
  title: Bazaar-Hub üõçÔ∏è E-commerce REST API
  version: 1.0.0
  description: A REST API for an e-commerce platform.
servers:
  - url: http://localhost:3000/api/v1
    description: Local server

paths:
  # Auth Api's
  /auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fullName
                - username
                - email
                - password
              properties:
                fullName:
                  type: string
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                avatar: 
                  type: binary
      responses:
        '201':
          description: User registered successfully.
        '400':
          description: Invalid input.

  /auth/login:
    post:
      summary: Login a user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email/username
                - password
              properties:
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User logged in successfully
        '400':
          description: Invalid input
  
  /auth/refresh-token:
    patch:
      summary: Refresh access token
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
                - userId
              properties:
                refreshToken:
                  type: string
                userId:
                  type: string
      responses:
        '200':
          description: Access token refreshed successfully
        '400':
          description: Invalid input
        '401':
          description: The refresh token provided is invalid or has expired
  
  # Users Api's
  /users/confirm-account:
    get:
      summary: Confirm user account
      tags: [Users]
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
        - name: confirmationToken
          in: query
          required: true
          schema:
            type: string
      
      responses:
        '200':
          description: Account confirmed successfully
        '400':
          description: Invalid input
        '404':
          description: User not found
        '401':
          description: Token is invalid or has expired
    
  /users/resend-confirmation-email:
    get:
      summary: Resend confirmation email
      tags: [Users]
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
      
      responses:
        '200':
          description: Confirmation email resent successfully
        '400':
          description: Invalid input

  /users/forgot-password:
    get:
      summary: Request password reset
      tags: [Users]
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Password reset link sent successfully
        '400':
          description: Invalid email address

  /users/reset-password:
    post:
      summary: Reset password
      tags: [Users]
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
        - name: resetPasswordToken
          in: query
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                confirmPassword:
                  type: string
      responses:
        '200':
          description: Password reset successfully
        '400':
          $ref: '#/components/responses/InvalidInput'
        '401':
          $ref: '#/components/responses/TokenInvalidOrExpired'
        '404':
          $ref: '#/components/responses/UserNotFound'
      
  /users/change-email:
    post:
      summary: Change user email
      tags: [Users]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newEmail:
                  type: string
      responses:
        '200':
          description: Email change request sent successfully

  /users/confirm-change-email:
    post:
      summary: Confirm email change
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Email change confirmed successfully

  /users/change-password:
    post:
      summary: Change user password
      tags: [Users]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        '200':
          description: Password changed successfully

  /users:
    get:
      summary: Get all users (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of all users retrieved successfully
        '403':
          description: Forbidden

  /users/{id}:
    get:
      summary: Get single user (admin & logged-in user)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details retrieved successfully
        '403':
          description: Forbidden
    put:
      summary: Update account details (logged-in user)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                username:
                  type: string
                email:
                  type: string
      responses:
        '200':
          description: User details updated successfully
    delete:
      summary: Delete account (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User account deleted successfully
        '403':
          description: Forbidden

  /users/profile/{id}:
    get:
      summary: Get user profile (public)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User profile retrieved successfully

  /users/manage-user-status:
    post:
      summary: Manage user status (admin only [ban/unban] user)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                status:
                  type: string
                  enum: [banned, active]
      responses:
        '200':
          description: User status updated successfully
        '403':
          description: Forbidden
  
  # Products Api's
  /products:
    post:
      summary: Create a new product
      tags: [Products]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - description
                - price
                - stock
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                stock:
                  type: integer
                image:
                  type: string
                  format: binary
      responses:
        '201':
          description: Product created successfully
        '400':
          description: Invalid input

    get:
      summary: Get all products
      tags: [Products]
      responses:
        '200':
          description: Products retrieved successfully
  
  /products/{id}:
    get:
      summary: Get a single product by ID
      tags: [Products]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product retrieved successfully
        '404':
          description: Product not found

    put:
      summary: Update a product by ID
      tags: [Products]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                stock:
                  type: integer
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Product updated successfully
        '400':
          description: Invalid input
        '404':
          description: Product not found

    delete:
      summary: Delete a product by ID
      tags: [Products]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product deleted successfully
        '404':
          description: Product not found
  
  # Categories
  
  # Orders
  /orders:
    post:
      summary: Create a new order
      tags: [Orders]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - products
                - totalPrice
              properties:
                products:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: string
                      quantity:
                        type: integer
                totalPrice:
                  type: number
      responses:
        '201':
          description: Order created successfully
        '400':
          description: Invalid input

    get:
      summary: Get all orders
      tags: [Orders]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Orders retrieved successfully
  
  /orders/{id}:
    get:
      summary: Get a single order by ID
      tags: [Orders]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order retrieved successfully
        '404':
          description: Order not found

    put:
      summary: Update order status by ID
      tags: [Orders]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
      responses:
        '200':
          description: Order status updated successfully
        '400':
          description: Invalid input
        '404':
          description: Order not found

  # Cart Api
  /cart:
    post:
      summary: Add product to cart
      tags: [Cart]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productId
                - quantity
              properties:
                productId:
                  type: string
                quantity:
                  type: integer
      responses:
        '201':
          description: Product added to cart
        '400':
          description: Invalid input

    get:
      summary: Get cart items
      tags: [Cart]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cart items retrieved successfully

    delete:
      summary: Clear cart
      tags: [Cart]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cart cleared successfully

  /cart/{id}:
    put:
      summary: Update cart item quantity
      tags: [Cart]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - quantity
              properties:
                quantity:
                  type: integer
      responses:
        '200':
          description: Cart item updated successfully
        '400':
          description: Invalid input
        '404':
          description: Cart item not found

    delete:
      summary: Delete cart item
      tags: [Cart]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Cart item deleted successfully
        '404':
          description: Cart item not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
    Product:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
        stock:
          type: integer
    Order:
      type: object
      properties:
        id:
          type: string
        products:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
              quantity:
                type: integer
        totalPrice:
          type: number
        status:
          type: string
    CartItem:
      type: object
      properties:
        id:
          type: string
        productId:
          type: string
        quantity:
          type: integer
  responses:
    InvalidInput:
      description: Invalid input
    UserNotFound:
      description: User not found
    TokenInvalidOrExpired:
      description: Token is invalid or has expired
      
